// Code generated by goctl. DO NOT EDIT.
package types

type AlgoSelectReq struct {
	ChooseType int32  `json:"choose_type"` // 筛选类型 1-拉取厂商列表  2-拉取算法类型列表  3-拉取算法名称列表 4-根据算法名称反查算法ID 5-拉取所有算法类型(dashboard的bar)
	Provider   string `json:"provider,optional"`
	AlgoType   string `json:"algo_type,optional"`
	AlgoName   string `json:"algo_name,optional"`
	Date       int64  `json:"date,optional"`
	UserId     string `json:"user_id,optional"` //用户ID
	UserType   int    `json:"user_type,optional"`
}

type AlgoSelectRsp struct {
	Code     int      `json:"code"`
	Msg      string   `json:"msg"`
	Provider []string `json:"provider"`
	AlgoType []string `json:"algo_type"`
	AlgoName []string `json:"algo_name"`
}

type LoginReq struct {
	UserName string `json:"user_name"` // 这里应该是用户ID，名称有歧义
	Passwd   string `json:"password"`
}

type LoginRsp struct {
	Code     int    `json:"code"`
	Msg      string `json:"msg"`
	Allow    int    `json:"allow"`     // 0-不允许,1-允许登陆 2-首次登陆或密码已过期，需要修改密码
	Role     int    `json:"role"`      // 角色：1-普通用户 2-算法厂商  3-管理员
	Token    string `json:"token"`     // token
	Expire   int64  `json:"expire"`    // token过期时间
	UserType int    `json:"user_type"` // 用户类型： 1-权限组超级管理员，2-其他普通用户
}

type LogoutReq struct {
	UserName string `json:"user_name"`
}

type LogoutRsp struct {
	Code   int    `json:"code"`
	Msg    string `json:"msg"`
	Result int    `json:"result"` // 1-退出成功
}

type GeneralData struct {
	TransTime    string  `json:"trans_time"`
	OrderQty     int64   `json:"order_qty"`
	LastQty      int64   `json:"last_qty"`
	CancelQty    int64   `json:"cancel_qty"`
	RejectQty    int64   `json:"reject_qty"`
	Vwap         float64 `json:"vwap"`
	VwapDev      float64 `json:"vwap_dev"`
	LastPrice    float64 `json:"last_price"`
	ArriPrice    float64 `json:"arri_price"`
	ArriPriceDev float64 `json:"arri_price_dev"`
	MarketRate   float64 `json:"market_rate"`
	DealRate     float64 `json:"deal_rate"`
	DealProgress float64 `json:"deal_progress"`
	MkLastPrice  float64 `json:"mk_last_price"`
	MkTradeVol   int64   `json:"mk_trade_vol"`
	AskPrice     string  `json:"ask_price"`
	AskVol       string  `json:"ask_vol"`
	BidPrice     string  `json:"bid_price"`
	BidVol       string  `json:"bid_vol"`
}

type GeneralReq struct {
	AlgoId          int32  `json:"algo_id"`
	SecId           string `json:"sec_id"`
	UserId          string `json:"user_id,optional"`
	SecSource       int32  `json:"sec_source,optional"`
	TimeDemension   int32  `json:"time_demension,range=[1:6]"`
	OrderStatusType int32  `json:"order_status_type,optional"`
	StartTime       int64  `json:"start_time"`
	EndTime         int64  `json:"end_time"`
	WebSocket       int32  `json:"web_socket,optional"`
}

type GeneralRsp struct {
	Code int           `json:"code"`
	Msg  string        `json:"msg"`
	Data []GeneralData `json:"data"`
}

type ProfileHead struct {
	AccountId   string `json:"user_id"`       // 用户ID
	AccountName string `json:"user_name"`     // 用户名称
	Provider    string `json:"provider"`      // 算法厂商
	AlgoId      int32  `json:"algo_id"`       // 算法ID
	AlgoName    string `json:"algo_name"`     // 算法名称
	CreateTime  string `json:"create_time"`   // 创建时间
	SecId       string `json:"sec_id"`        // 证券代码
	SecName     string `json:"sec_name"`      // 证券名称
	AlgoOrderId int64  `json:"algo_order_id"` // 母单ID
	Industry    string `json:"industry"`      // 行业
	FundType    int32  `json:"fund_type"`     // 市值
	Flowability int32  `json:"flowability"`   // 流动性
	BatchNo     int64  `json:"batch_no"`      // 批次号
}

type EconomyStruct struct {
	ProfileHead
	TradeVol       float64 `json:"trade_vol"`        // 交易总量
	Profit         float64 `json:"profit"`           // 盈亏金额
	ProfitRate     float64 `json:"profit_rate"`      // 收益率
	TotalFee       float64 `json:"total_fee"`        // 总手续费
	CrossFee       float64 `json:"cross_fee"`        // 流量费
	CancelRate     float64 `json:"cancel_rate"`      // 撤单率
	MinSplitOrder  int32   `json:"min_split_order"`  // 最小拆单单位
	DealEffi       float64 `json:"deal_eff"`         // 成交效率
	AvgTradePrice  float64 `json:"avg_trade_price"`  // 母单执行均价
	AvgArrivePrice float64 `json:"avg_arrive_price"` // 母单达到均价
	PWP            float64 `json:"pwp"`              // pwp价格
	AlgoDuration   int64   `json:"algo_duration"`    // 母单有效时长
	TWAP           float64 `json:"twap"`             // twap值
	TWAPDev        float64 `json:"twap_dev"`         // twap滑点
	VWAP           float64 `json:"vwap"`             // vwap值
	VWAPDev        float64 `json:"vwap_dev"`         // vwap滑点
}

type ProgressStruct struct {
	ProfileHead
	Progress     float64 `json:"progress"`       // 完成度
	AlgoOrderFit float64 `json:"algo_order_fit"` // 母单贴合度
	PriceFit     float64 `json:"price_fit"`      // 价格贴合度
	TradeVolFit  float64 `json:"trade_vol_fit"`  // 成交量贴合度
}

type RiskStruct struct {
	ProfileHead
	MinJointRate float64 `json:"min_jonit_rate"` // 最小贴合度
	ProfitRate   float64 `json:"profit_rate"`    // 收益率
	WithdrawRate float64 `json:"withdraw_rate"`  // 回撤比例
}

type AssessStruct struct {
	ProfileHead
	VwapDev    float64 `json:"vwap_dev"`    // vwap 滑点值
	ProfitRate float64 `json:"profit_rate"` // 收益率
}

type StabilityStruct struct {
	ProfileHead
	VwapStdDev        float64 `json:"vwap_std_dev"`          // vwap 滑点标准差
	ProfitRateStd     float64 `json:"profit_rate_std"`       // 收益率标准差
	JointRate         float64 `json:"joint_rate"`            // 贴合度
	TradeVolFitStdDev float64 `json:"trade_vol_fit_std_dev"` // 成交量贴合度标准差
	TimeFitStdDev     float64 `json:"time_fit_std_dev"`      // 时间贴合度校准差
}

type ProfileReq struct {
	ProfileType  int32  `json:"profile_type,range=[1:5]"` // 获取画像类型  1-经济性，2-完成度，3-风险度，4-算法绩效 5-稳定性
	Provider     string `json:"provider,optional"`        // 厂商
	AlgoTypeName string `json:"algo_type_name,optional"`  // 算法类型
	AlgoName     string `json:"algo_name,optional"`       // 算法名称
	UserId       string `json:"user_id,optional"`         // 用户ID
	UserType     int    `json:"user_type,optional"`       // 用户类型
	StartTime    int64  `json:"start_time"`               // 开始时间
	EndTime      int64  `json:"end_time"`                 // 结束时间
	Page         int32  `json:"page"`                     // 当前页数
	Limit        int32  `json:"limit"`                    // 每页数量
	SourceFrom   int32  `json:"source_from,default=1"`    //数据来源，1:总线 ,2:订单导入
	BatchNo      int64  `json:"batch_no,optional"`        // 批次号
}

type ProfileRsp struct {
	Code      int               `json:"code"`
	Msg       string            `json:"msg"`
	Total     int64             `json:"total"`
	Economy   []EconomyStruct   `json:"economy"`
	Progress  []ProgressStruct  `json:"progress"`
	Risk      []RiskStruct      `json:"risk"`
	Assess    []AssessStruct    `json:"assess"`
	Stability []StabilityStruct `json:"stability"`
}

type ProfileExportReq struct {
	ProfileType  int32  `form:"profile_type"` // 导出画像类型
	UserId       string `form:"user_id,optional"`
	UserType     int    `form:"user_type,optional"`
	Provider     string `form:"provider,optional"`
	AlgoTypeName string `form:"algo_type_name,optional"`
	AlgoName     string `form:"algo_name,optional"`
	StartTime    int64  `form:"start_time,optional"`
	EndTime      int64  `form:"end_time,optional"`
}

type ProfileExportRsp struct {
	Code     int    `json:"code"`
	Msg      string `json:"msg"`
	FileName string `json:"file_name"`
}

type DBMarketRateInfo struct {
	HugeRate   float64 `json:"huge"`   // 超大市值
	BigRate    float64 `json:"big"`    // 大市值
	MiddleRate float64 `json:"middle"` // 中等市值
	SmallRate  float64 `json:"small"`  //  小市值
}

type DBTradeSide struct {
	BuyRate  float64 `json:"buy"`  // 买入占比
	SellRate float64 `json:"sell"` // 卖出占比
}

type AlgoComsumReq struct {
	StartTime int64  `json:"start_time"`
	EndTime   int64  `json:"end_time"`
	UserId    string `json:"user_id,optional"`
	UserType  int    `json:"user_type,optional"`
}

type AlgoComsumRsp struct {
	UserCnt          int64            `json:"user_cnt"`           // 用户数量 (当天有交易)
	TotalUserCnt     int64            `json:"total_user_cnt"`     // 用户总数量(基础数据)
	AlgoCnt          int64            `json:"algo_cnt"`           // 算法数量
	TotalAlgoCnt     int64            `json:"total_algo_cnt"`     // 算法总数量(基础数据)
	TradeVol         float64          `json:"trade_vol"`          // 交易量
	OrderCnt         int64            `json:"order_cnt"`          //  订单数量 (以篮子为单位）
	Side             DBTradeSide      `json:"side"`               //  买卖占比
	ProviderCnt      int64            `json:"provider_cnt"`       //   厂商数量
	TotalProviderCnt int64            `json:"total_provider_cnt"` //  厂商总数量(基础数据)
	MarketRate       DBMarketRateInfo `json:"market_rate"`        //   市场占比
	Progress         float64          `json:"progress"`           //   完成度
}

type AlgoListInfo struct {
	Provider   string      `json:"provider"`    // 厂商名称
	UserCnt    int64       `json:"user_cnt"`    // 用户数量
	TradeVol   float64     `json:"trade_vol"`   // 交易量
	ProfitRate float64     `json:"profit_rate"` // 盈亏比例
	OrderCnt   int64       `json:"order_cnt"`   // 订单数量
	Side       DBTradeSide `json:"side"`        //  买卖占比
}

type MTTimeLine struct {
	TimePoint string `json:"time_point"`
	Score     int32  `json:"score"`
}

type AlgoAccessInfo struct {
	AlgoName   string       `json:"algo_name"`
	TotalScore int32        `json:"total_score"`
	TL         []MTTimeLine `json:"time_line"`
}

type AlgoListReq struct {
	StartTime    int64  `json:"start_time"`
	EndTime      int64  `json:"end_time"`
	AlgoTypeName string `json:"algo_type_name"`
	UserId       string `json:"user_id,optional"`
	UserType     int    `json:"user_type,optional"`
	Page         int32  `json:"page"`
	Limit        int32  `json:"limit"`
}

type AlgoListRsp struct {
	Code  int              `json:"code"`
	Msg   string           `json:"msg"`
	Total int64            `json:"total"`
	List  []AlgoListInfo   `json:"list"`
	Infos []AlgoAccessInfo `json:"assess"`
}

type DNMarketRateInfo struct {
	MkName string  `json:"mk_name"`
	Rate   float64 `json:"rate"`
}

type DNTradeSide struct {
	BuyRate  float64 `json:"buy_rate"`  // 买入占比
	SellRate float64 `json:"sell_rate"` // 卖出占比
}

type StockPriceType struct {
	TypeName string  `json:"type_name"`
	Rate     float64 `json:"rate"`
}

type TradeVol struct {
	VolName string  `json:"vol_name"`
	Rate    float64 `json:"rate"` // 占比
}

type TimeLine struct {
	TimePoint string `json:"time_point"` // 时间点
	Score     int32  `json:"score"`      // 分数
}

type DemensionLine struct {
	ProfileType int32      `json:"profile_type"` //1-经济性，2-完成度，3-风险度，4-算法绩效 5-稳定性
	Point       []TimeLine `json:"point"`        // 时间曲线
}

type DimensionInfo struct {
	ProfileType int32  `json:"profile_type"` // 类型  1-经济性，2-完成度，3-风险度，4-算法绩效 5-稳定性
	Score       int32  `json:"score"`        // 各维度评分
	Desc        string `json:"desc"`         // 评价描述
}

type DynamicReq struct {
	AlgoName   string `json:"algo_name,optional"`
	UserId     string `json:"user_id"`
	UserType   int    `json:"user_type, optional"`
	StartTime  int64  `json:"start_time"`
	EndTime    int64  `json:"end_time"`
	SourceFrom int32  `json:"source_from,default=1"` // 来源：1-总线  2-订单导入
	BatchNo    int64  `json:"batch_no,optional"`     // 为订单导入时，批次号
}

type DynamicRsp struct {
	Code           int                `json:"code"`
	Msg            string             `json:"msg"`
	CrossDay       bool               `json:"cross_day"` // 跨天标识
	Provider       string             `json:"provider"`
	AlgoTypeName   string             `json:"algo_type_name"`
	AlgoName       string             `json:"algo_name"`
	Dimension      []DimensionInfo    `json:"dimension"`       // 五个维度
	CompositeScore int32              `json:"composite_score"` // 总体评分
	Ranking        int32              `json:"ranking"`         // 排名
	MarketRate     []DNMarketRateInfo `json:"market_rate"`     // 市场占比
	Side           DNTradeSide        `json:"side"`            // 买卖方向
	PriceType      []StockPriceType   `json:"price_type"`      //  股价类型
	VolType        []TradeVol         `json:"vol_type"`        // 交易量占比
	AssessLine     DemensionLine      `json:"assess_line"`     // 实时绩效
	ProgressLine   DemensionLine      `json:"progress_line"`   // 实时完成度
	AlgoNameList   []string           `json:"algo_name_list"`  // 绩效分析中多算法分析时，需返回其算法名称列表
}

type OrigChild struct {
	BatchNo int64 `json:"batch_no"`
	AlgoId  int   `json:"algo_id"`
	ChildId int   `json:"child_id"`
}

type AnalyseInfo struct {
	Date int32 `json:"date"` // 日期
	Id   int32 `json:"id"`   // ID号
}

type OrigAnalyseReq struct {
	Orders    []AnalyseInfo `json:"orders"`
	OrderType int32         `json:"orderType"` //1：母单，2：子单
}

type OrigAnalyseResp struct {
	Code      int    `json:"code"`
	Msg       string `json:"msg"`
	BatchNo   int64  `json:"batch_no"`   // 批次号
	StartTime int64  `json:"start_time"` // 开始时间
	EndTime   int64  `json:"end_time"`   // 结束时间
}

type AnalyseTimeLine struct {
	TimePoint string `json:"time_point"` // 时间点
	Score     int32  `json:"score"`      // 分数
}

type AnalyseLine struct {
	ProfileType int32             `json:"profile_type"` //1-经济性，2-完成度，3-风险度，4-算法绩效 5-稳定性
	Point       []AnalyseTimeLine `json:"point"`        // 时间曲线
}

type AlgoDimension struct {
	ProfileType int32  `json:"profile_type"` //  1-经济性，2-完成度，3-风险度，4-算法绩效 5-稳定性
	Score       int    `json:"score"`        // 分数
	Desc        string `json:"desc"`         //  评分描述
}

type AlgoScore struct {
	AlgoName       string            `json:"algo_name"`       // 算法名称
	CompositeScore int32             `json:"composite_score"` // 总体评分
	Ranking        int32             `json:"ranking"`         // 排名
	Dimension      []AlgoDimension   `json:"dimension"`       // 各维度列表
	Data           []AnalyseTimeLine `json:"data"`            // 时间点列表
}

type AnalyseReq struct {
	StartTime int64  `json:"start_time"`
	EndTime   int64  `json:"end_time"`
	AlgoName  string `json:"algo_name,optional"`
	UserId    string `json:"user_id"`
	UserType  int    `json:"user_type,optional"`
}

type AnalyseRsp struct {
	Code         int           `json:"code"`
	Msg          string        `json:"msg"`
	CrossDay     bool          `json:"cross_day"`
	Provider     string        `json:"provider"`
	AlgoTypeName string        `json:"algo_type_name"`
	AlgoName     string        `json:"algo_name"`
	Data         []AnalyseLine `json:"data"`
}

type MultiAnalyseReq struct {
	StartTime int64    `json:"start_time"`
	EndTime   int64    `json:"end_time"`
	UserId    string   `json:"user_id"`
	UserType  int      `json:"user_type,optional"`
	AlgoName  []string `json:"algo_name"`
}

type MultiAnalyseRsp struct {
	Code         int         `json:"code"`
	Msg          string      `json:"msg"`
	CrossDay     bool        `json:"cross_day"`
	Provider     string      `json:"provider"`
	AlgoTypeName string      `json:"algo_type_name"`
	AlgoName     []string    `json:"algo_name"`
	List         []AlgoScore `json:"list"`
}

type OptimizeInfo struct {
	Id            int64  `json:"id"`            // 主键ID
	Provider_id   int    `json:"provider_id"`   //厂商id
	Provider_name string `json:"provider_name"` //厂商名称
	SecId         string `json:"sec_id"`        // 证券ID
	SecName       string `json:"sec_name"`      // 证券名称
	AlgoId        int    `json:"algo_id"`       // 算法id
	AlgoName      string `json:"algo_name"`     // 算法名称
}

type OptimizeReq struct {
	SecurityId []string `json:"security_id, optional"` // 用户账户ID， 选择现有持仓时用
	AlgoIds    []int32  `json:"algo_ids"`              // 算法id组
}

type OptimizeRsp struct {
	Code  int            `json:"code"`
	Msg   string         `json:"msg"`
	Total int64          `json:"total"`
	Data  []OptimizeInfo `json:"data"`
}

type AddOptimizeBaseReq struct {
	ProviderId   int32   `json:"provider_id"`   // 算法厂商id
	ProviderName string  `json:"provider_name"` // 算法厂商名称
	SecId        string  `json:"sec_id"`        // 证券id
	SecName      string  `json:"sec_name"`      // 证券名称
	AlgoId       int32   `json:"algo_id"`       // 算法id
	AlgoType     int32   `json:"algo_type"`     // 算法类型 1:T0日内回转 2:智能委托 3:调仓
	AlgoName     string  `json:"algo_name"`     // 算法名
	OpenRate     float64 `json:"open_rate"`     // 开仓率
	IncomeRate   float64 `json:"income_rate"`   // 收益率
	BasisPoint   float64 `json:"basis_point"`   // 基点
}

type OptimizeBaseRsp struct {
	Code int    `json:"code"`
	Msg  string `json:"msg"`
}

type UpdateOptimizeBaseReq struct {
	Id           int64   `json:"id"`            // id
	ProviderId   int32   `json:"provider_id"`   // 算法厂商id
	ProviderName string  `json:"provider_name"` // 算法厂商名称
	SecId        string  `json:"sec_id"`        // 证券id
	SecName      string  `json:"sec_name"`      // 证券名称
	AlgoId       int32   `json:"algo_id"`       // 算法id
	AlgoType     int32   `json:"algo_type"`     // 算法类型 1:T0日内回转 2:智能委托 3:调仓
	AlgoName     string  `json:"algo_name"`     // 算法名
	OpenRate     float64 `json:"open_rate"`     // 开仓率
	IncomeRate   float64 `json:"income_rate"`   // 收益率
	BasisPoint   float64 `json:"basis_point"`   // 基点
}

type DeleteOptimizeBaseReq struct {
	Id int64 `json:"id"`
}

type SelectOptimizeBaseReq struct {
	ProviderId int32  `json:"provider_id"` // 算法厂商id
	AlgoId     int32  `json:"algo_id"`     // 算法id
	SecId      string `json:"sec_id"`      // 证券id
	Page       int32  `json:"page"`        // 当前页数
	Limit      int32  `json:"limit"`       // 每页数量
}

type OptimizeBase struct {
	Id           int64   `json:"id",xml:"Id"`                      // id
	ProviderId   int32   `json:"provider_id",xml:"ProviderId"`     // 算法厂商id
	ProviderName string  `json:"provider_name",xml:PproviderName"` // 算法厂商名称
	SecId        string  `json:"sec_id",xml:"SecId"`               // 证券id
	SecName      string  `json:"sec_name",xml:"SecName"`           // 证券名称
	AlgoId       int32   `json:"algo_id",xml:"AlgoId"`             // 算法id
	AlgoType     int32   `json:"algo_type",xml:"AlgoType"`         // 算法类型 1:T0日内回转 2:智能委托 3:调仓
	AlgoName     string  `json:"algo_name",xml:"AlgoName"`         // 算法名
	OpenRate     float64 `json:"open_rate",xml:"OpenRate"`         // 开仓率
	IncomeRate   float64 `json:"income_rate",xml:"IncomeRate"`     // 收益率
	BasisPoint   float64 `json:"basis_point",xml:"BasisPoint"`     // 基点
	CreateTime   string  `json:"create_time",xml:"CreateTime"`
	UpdateTime   string  `json:"update_time",xml:"UpdateTime"`
}

type SelectOptimizeBaseRsp struct {
	Code  int            `json:"code"`
	Msg   string         `json:"msg"`
	Total int64          `json:"total"`
	Data  []OptimizeBase `json:"data"`
}

type TotalScore struct {
	Ranking  int32  `json:"ranking"`   // 名次
	AlgoName string `json:"algo_name"` // 算法名称
	Score    int32  `json:"score"`     // 分数
	SecId    string `json:"sec_id"`    // 证券代码
	SecName  string `json:"sec_name"`  // 证券名称
	UserId   string `json:"user_id"`   // 用户ID
	UserName string `json:"user_name"` // 用户名称
}

type RankingReq struct {
	Date        int64  `json:"date"`
	RankingType int32  `json:"rank_type"`        // 1.dashboard 算法总体评分排名   2.高阶股票排名 3. 高阶用户排名
	UserId      string `json:"user_id,optional"` // 用户ID
	UserType    int    `json:"user_type,optional"`
	Page        int32  `json:"page"`  // 当前页数
	Limit       int32  `json:"limit"` // 每页数量
}

type RankingRsp struct {
	Code  int          `json:"code"`
	Msg   string       `json:"msg"`
	Total int64        `json:"total"`
	Info  []TotalScore `json:"info"`
}

type UserFund struct {
	SecId   string  `json:"sec_id"`   // 证券代码
	SecName string  `json:"sec_name"` // 证券名称
	Hold    float64 `json:"hold"`     // 持仓市值
	Cost    float64 `json:"cost"`     // 成本
}

type UDimensionInfo struct {
	ProfileType int32  `json:"profile_type"` // 类型  1-经济性，2-完成度，3-风险度，4-算法绩效 5-稳定性
	Score       int32  `json:"score"`        // 各维度评分
	Desc        string `json:"desc"`         // 评价描述
}

type UTimeLine struct {
	TimePoint string `json:"time_point"` // 时间点
	Score     int32  `json:"score"`      // 分数
}

type UDemensionLine struct {
	ProfileType int32       `json:"profile_type"` //1-经济性，2-完成度，3-风险度，4-算法绩效 5-稳定性
	Point       []UTimeLine `json:"point"`        // 时间曲线
}

type UserSummaryReq struct {
	UserId    string `json:"user_id, optional"` // 用户ID
	UserType  int    `json:"user_type,optional"`
	AlgoName  string `json:"algo_name, optional"` // 算法名称
	StartTime int64  `json:"start_time"`          // 开始时间
	EndTime   int64  `json:"end_time"`            // 结束时间
}

type UserSummaryRsp struct {
	Code         int              `json:"code"`
	Msg          string           `json:"msg"`
	Provider     string           `json:"provider"`       // 不选时需返回
	AlgoTypeName string           `json:"algo_type_name"` // 不选时需返回
	AlgoName     string           `json:"algo_name"`      // 不选时需返回
	Fund         float64          `json:"fund"`           // 总资金
	Profit       float64          `json:"profit"`         // 盈亏金额
	TradeCnt     int32            `json:"trade_cnt"`      // 交易次数
	CurTradeVol  float64          `json:"cur_trade_vol"`  // 当天交易金额
	CurRollHold  float64          `json:"cur_roll_hold"`  // 当天滚动持仓
	Progress     float64          `json:"progress"`       // 完成度
	LoginCnt     int32            `json:"login_cnt"`      // 登陆次数
	UserGrade    string           `json:"user_grade"`     // 用户级别
	FundList     []UserFund       `json:"fund_list"`      // 用户资产列表
	TotalScore   int32            `json:"total_score"`    // 综合评分
	Ranking      int32            `json:"ranking"`        // 排名
	Dimensions   []UDimensionInfo `json:"dimensions"`     // 五个维度
	AssessLine   UDemensionLine   `json:"assess_line"`    // 实时绩效
	ProgressLine UDemensionLine   `json:"progress_line"`  // 实时完成度
}

type SecurityInfo struct {
	Id         int64  `json:"id"`
	SecId      string `json:"sec_id"`
	SecName    string `json:"sec_name"`
	Status     int32  `json:"status"`
	FundType   int32  `json:"fund_type"`
	StockType  int32  `json:"stock_type"`
	Liquidity  int32  `json:"liquidity"` // 流动性
	Industry   string `json:"industry"`  // 行业类型
	UpdateTime string `json:"update_time"`
}

type ListSecurityReq struct {
	SecId string `json:"sec_id, optional"`
	Page  int32  `json:"page"`  // 当前页数
	Limit int32  `json:"limit"` // 每页数量
}

type ListSecurityRsp struct {
	Code  int            `json:"code"`
	Msg   string         `json:"msg"`
	Total int64          `json:"total"`
	Infos []SecurityInfo `json:"infos"`
}

type SecurityUpdates struct {
	SecId     string `json:"sec_id"`
	SecName   string `json:"sec_name,optional"`
	FundType  int32  `json:"fund_type,optional"`
	StockType int32  `json:"stock_type,optional"`
	Liquidity int32  `json:"liquidity"` // 流动性
	Industry  string `json:"industry"`  // 行业类型
}

type ModifySecurityReq struct {
	OperType int32             `json:"oper_type"` // 操作类型  1-新增， 2-修改   3-删除
	Lists    []SecurityUpdates `json:"lists"`
}

type ModifySecurityRsp struct {
	Code   int    `json:"code"`
	Msg    string `json:"msg"`
	Result int32  `json:"result"` // 1--成功    2--失败
}

type ImportSecurityRsp struct {
	Code   int    `json:"code"`
	Msg    string `json:"msg"`
	Result int32  `json:"result"` // 1--成功    2--失败
}

type UserInfo struct {
	Id         int64  `json:"id"`
	UserId     string `json:"user_id"`
	UserName   string `json:"user_name"`
	UserType   int32  `json:"user_type"`   // 管理员， 算法厂商，普通用户
	UserGrade  string `json:"grade"`       // 用户级别
	UpdateTime string `json:"update_time"` // 更新时间
}

type ListUserReq struct {
	UserId string `json:"user_id,optional"`
	Page   int32  `json:"page"`  // 当前页数
	Limit  int32  `json:"limit"` // 每页数量
}

type ListUserRsp struct {
	Code  int        `json:"code"`
	Msg   string     `json:"msg"`
	Total int64      `json:"total"`
	Infos []UserInfo `json:"infos"`
}

type UserUpdates struct {
	UserId   string `json:"user_id"`
	UserName string `json:"user_name,optional"`
	Grade    string `json:"grade,optional"`
}

type ModifyUserReq struct {
	OperType int32         `json:"oper_type"` // 操作类型  1-新增， 2-修改   3-删除
	Lists    []UserUpdates `json:"lists"`
}

type ModifyUserRsp struct {
	Code   int    `json:"code"`
	Msg    string `json:"msg"`
	Result int32  `json:"result"` // 1--成功    2--失败
}

type ImportUserRsp struct {
	Code   int    `json:"code"`
	Msg    string `json:"msg"`
	Result int32  `json:"result"` // 1--成功    2--失败
}

type BaseRsp struct {
	Code      int    `json:"code"`
	Msg       string `json:"msg"`
	BatchNo   int64  `json:"batch_no"`
	StartTime int64  `json:"start_time"` // 开始时间
	EndTime   int64  `json:"end_time"`   // 结束时间
}

type MarketReq struct {
	SecId string `json:"secId"`
}

type TradeOrderReq struct {
	ExportType   int32  `json:"export_type"`             // 导出类型  1-母单导出  2-子单导出
	StartTime    int64  `json:"start_time,optional"`     // 导出日期  开始
	EndTime      int64  `json:"end_time,optional"`       // 结束时间
	UserId       string `json:"user_id,optional"`        // 用户ID
	AlgoOrderId  int64  `json:"algo_order_id,optional"`  // 母单号
	ChildOrderId int64  `json:"child_order_id,optional"` // 子单号
}

type MarketInfo struct {
	Id            int64   `json:"id"`
	SeculityId    string  `json:"seculityId"`
	OrgiTime      int64   `json:"orgiTime"`
	LastPrice     int64   `json:"lastPrice"`
	AskPrice      string  `json:"askPrice"`
	AskVol        string  `json:"askVol"`
	BidPrice      string  `json:"bidPrice"`
	BidVol        string  `json:"bidVol"`
	TotalTradeVol int64   `json:"totalTradeVol"`
	TotalAskVol   int64   `json:"totalAskVol"`
	TotalBidVol   int64   `json:"TotalBidVol"`
	MkVwap        float64 `json:"mkVwap"`
}

type MarketResp struct {
	Code  int          `json:"code"`
	Msg   string       `json:"msg"`
	Total int64        `json:"total"`
	Data  []MarketInfo `json:"data"`
}

type AlgoOrder struct {
	Id            uint32 `json:"id",xml:"Id"`
	BasketId      uint32 `json:"basketId",xml:"BasketId"`
	AlgorithmType uint16 `json:"algorithmType",xml:"AlgorithmType"`
	AlgorithmId   uint16 `json:"algorithmId",xml:"AlgorithmId"`
	USecurityId   uint32 `json:"uSecurityId",xml:"USecurityId"`
	SecurityId    string `json:"securityId",xml:"SecurityId"`
	AlgoOrderQty  uint64 `json:"algoOrderQty",xml:"AlgoOrderQty"`
	TransactTime  uint64 `json:"transactTime",xml:"TransactTime"`
	StartTime     uint64 `json:"startTime",xml:"StartTime"`
	EndTime       uint64 `json:"endTime",xml:"EndTime"`
	BusUserId     string `json:"busUserId",xml:"UserId"`
}

type ChildOrder struct {
	Id             uint32  `json:"id",xml:"Id"`
	BusUserId      string  `json:"busUserId",xml:"BusUserId"`
	BusUuserId     uint32  `json:"busUuserId",xml:"UuserId"`
	AlgoOrderId    uint32  `json:"algoOrderId",xml:"AlgoOrderId"`
	AlgorithmType  uint16  `json:"algorithmType",xml:"AlgorithmType"`
	AlgorithmId    uint16  `json:"algorithmId",xml:"AlgorithmId"`
	USecurityId    uint32  `json:"uSecurityId",xml:"USecurityId"`
	SecurityId     string  `json:"securityId",xml:"SecurityId"`
	Side           uint16  `json:"side",xml:"Side"`
	OrderQty       uint64  `json:"orderQty",xml:"OrderQty"`
	Price          int64   `json:"price",xml:"Price"`
	OrderType      uint8   `json:"orderType",xml:"OrderType"`
	CumQty         uint64  `json:"cumQty",xml:"CumQty"`
	LastPx         int64   `json:"lastPx",xml:"LastPx"`
	LastQty        uint64  `json:"lastQty",xml:"LastQty"`
	Charge         float64 `json:"charge",xml:"Charge"`
	ArrivedPrice   int64   `json:"arrivedPrice",xml:"ArrivedPrice"`
	ChildOrdStatus uint8   `json:"childOrdStatus",xml:"ChildOrdStatus"`
	TransactTime   uint64  `json:"transactTime",xml:"TransactTime"`
}

type QueryAlgoOrder struct {
	Id           int64  `json:"id"`
	Date         int32  `json:"date"` // 日期
	BasketId     int32  `json:"basketId"`
	AlgoId       int32  `json:"algoId"`
	AlgorithmId  int32  `json:"algorithmId"`
	UserId       string `json:"userId"`
	SecId        string `json:"secId"`
	AlgoOrderQty int64  `json:"algoOrderQty"`
	TransTime    string `json:"transTime"`
	StartTime    string `json:"startTime"`
	EndTime      string `json:"endTime"`
	FixFlag      int32  `json:"fixFlag"`
	CreateTime   string `json:"createTime"`
	AlgoName     string `json:"algoName"`
	BatchNo      int64  `json:"batchNo"`
	BatchName    string `json:"batchName"`
}

type ReqQueryAlgoOrder struct {
	AlgoId    int32  `json:"algo_order_id,optional"` // 母单ID   --这个字段有歧义
	SecId     string `json:"security_id,optional"`   // 证券代码
	AlgoName  string `json:"algo_name,optional"`     // 算法名称
	Scene     int    `json:"scene,default = 1"`      // 场景： 1-数据修改   2-原始订单
	PageId    int32  `json:"page_id"`                // 当前页数
	PageNum   int32  `json:"page_num"`               // 每页数量
	UserId    string `json:"user_id,optional"`
	UserType  int    `json:"user_type,optional"`  // 用户类型
	StartTime int64  `json:"start_time,optional"` // 导出日期  开始
	EndTime   int64  `json:"end_time,optional"`   // 结束时间
}

type RespQueryAlgoOrder struct {
	Code  int              `json:"code"`
	Msg   string           `json:"msg"`
	Total int64            `json:"total"`
	Data  []QueryAlgoOrder `json:"data"`
}

type ChildOrderInfo struct {
	Id            uint64  `json:"id"`
	Date          int32   `json:"date"` // 日期 20230611
	ChildOrderId  int64   `json:"childOrderId"`
	AlgoOrderId   uint32  `json:"algoOrderId"`
	AlgorithmType uint32  `json:"algorithmType"`
	AlgorithmId   uint32  `json:"algorithmId"`
	UserId        string  `json:"userId"`
	UsecurityId   uint32  `json:"usecurityId"`
	SecurityId    string  `json:"securityId"`
	TradeSide     int8    `json:"tradeSide"`
	OrderQty      int64   `json:"orderQty"`
	Price         float64 `json:"price"`
	OrderType     uint16  `json:"orderType"`
	LastPx        float64 `json:"lastPx"`
	LastQty       int64   `json:"lastQty"`
	ComQty        int64   `json:"comQty"`
	ArrivedPrice  float64 `json:"arrivedPrice"`
	TotalFee      float64 `json:"totalFee"`
	OrdStatus     uint16  `json:"ordStatus"`
	TransactTime  string  `json:"transactTime"`
	TransactAt    string  `json:"transactAt"`
	ProcStatus    uint16  `json:"procStatus"`
	FixFlag       int32   `json:"fixFlag"`
	CreateTime    string  `json:"createTime"`
	AlgoName      string  `json:"algoName"`
	BatchNo       int64   `json:"batchNo"`
	BatchName     string  `json:"batchName"`
}

type ReqQueryChildOrder struct {
	UserId       string `json:"user_id,optional"`
	UserType     int    `json:"user_type,optional"`   // 用户类型
	SecurityId   string `json:"security_id,optional"` //
	ChildOrderId int64  `json:"child_order_id,optional"`
	AlgoName     string `json:"algo_name,optional"` // 算法名称
	Scene        int    `json:"scene,default = 1"`  // 1.数据修复    2- 原始订单
	PageId       int32  `json:"page_id"`
	PageNum      int32  `json:"page_num"`
	StartTime    int64  `json:"start_time,optional"`    // 导出日期  开始
	EndTime      int64  `json:"end_time,optional"`      // 结束时间
	AlgoOrderId  int64  `json:"algo_order_id,optional"` // 母单ID
}

type RespQueryChildOrder struct {
	Code  int              `json:"code"`
	Msg   string           `json:"msg"`
	Total int64            `json:"total"`
	Data  []ChildOrderInfo `json:"data"`
}

type ReqShQuoteLevel struct {
	SecurityId string `json:"securityId,optional"`
	PageId     int32  `json:"pageId"`
	PageNum    int32  `json:"pageNum"`
	MaxId      int64  `json:"max_id,optional"`
}

type RespShQuoteLevel struct {
	Code  int          `json:"code"`
	Msg   string       `json:"msg"`
	Total int64        `json:"total"`
	MaxId int64        `json:"max_id"`
	Data  []QuoteLevel `json:"data"`
}

type QuoteLevel struct {
	Id            int64   `json:"id",xml:"Id"`                       //'自增ID'
	SeculityId    string  `json:"seculityId",xml:"SeculityId"`       // '证券ID'
	OrgiTime      int64   `json:"orgiTime",xml:"orgiTime"`           //'快照时间',
	LastPrice     float64 `json:"lastPrice",xml:"LastPrice"`         // '最新价',
	AskPrice      string  `json:"askPrice",xml:"AskPrice"`           // '申卖价',
	AskVol        string  `json:"askVol",xml:"AskVol"`               //'申卖量',
	BidPrice      string  `json:"bidPrice",xml:"BidPrice"`           // '申买价',
	BidVol        string  `json:"bidVol",xml:"bidVol"`               // '申买量',
	TotalTradeVol int64   `json:"totalTradeVol",xml:"TotalTradeVol"` // '成交总量',
	TotalAskVol   int64   `json:"totalAskVol",xml:"TotalAskVol"`
	TotalBidVol   int64   `json:"totalBidVol",xml:"TotalBidVol"`
	MkVwap        float64 `json:"mkVwap",xml:"MkVwap"`
	FixFlag       int     `json:"fixFlag",xml:"fixFlag"` // 修复标识
}

type ReqSzQuoteLevel struct {
	SecurityId string `json:"securityId,optional"`
	PageId     int32  `json:"pageId"`
	PageNum    int32  `json:"pageNum"`
	MaxId      int64  `json:"max_id,optional"`
}

type RespSzQuoteLevel struct {
	Code  int          `json:"code"`
	Msg   string       `json:"msg"`
	Total int64        `json:"total"`
	MaxId int64        `json:"max_id"`
	Data  []QuoteLevel `json:"data"`
}

type TemplateExpReq struct {
	ExportType int `form:"export_type"` // 导出类型： 1-深沪市行情模板导出   2-母单信息模板导出   3-子单信息模板导出
}

type AlgoConfigReq struct {
	ProfileType int32  `json:"profile_type"`
	ConfigJson  string `json:"config_json"`
}

type AlgoConfigRsp struct {
	Code   int    `json:"code"`
	Msg    string `json:"msg"`
	Result int32  `json:"result"` // 1-成功  2-失败
}

type QueryAlgoConfigReq struct {
	QueryType int32 `json:"query_type"` // 1-经济性 2-完成度 3-风险度 4-绩效 5-稳定性
}

type QueryAlgoConfigRsp struct {
	Code       int    `json:"code"`
	Msg        string `json:"msg"`
	ConfigJson string `json:"config_json"`
}

type RatioHeader struct {
	AlgoName         string  `json:"algo_name"`         // 算法名称
	StartTime        string  `json:"start_time"`        // 开始时间
	EndTime          string  `json:"end_time"`          //  结束时间
	TradeDays        int     `json:"trade_days"`        // 交易天数
	AvgDailyProfit   float64 `json:"avg_daily_profit"`  // 日均收益
	AnnualizedProfit float64 `json:"annualized_profit"` // 年化收益
	TotalProfit      float64 `json:"total_profit"`      // 累计收益
	MaxWithDraw      float64 `json:"max_withdraw"`      //  最大回撤
	MaxWithDrawDays  int     `json:"max_withdraw_days"` //  最大回撤天数
	DailyProgress    float64 `json:"daily_progress"`    //  日均完成率
	DailyStocks      int     `json:"daily_stocks"`      //  日均股数
	ProfitDays       int     `json:"profit_days"`       //  盈利天数
	ProfitDaysRate   float64 `json:"profit_days_rate"`  //  盈利天占比
}

type WR struct {
	Day      string  `json:"day"`
	WinRatio float64 `json:"win_ratio"`
}

type Odds struct {
	Day       string  `json:"day"`
	OddsRatio float64 `json:"odds_ratio"`
}

type Profit struct {
	Day         string  `json:"day"`
	ProfitRatio float64 `json:"profit_ratio"`
}

type WinRatioReq struct {
	Provider     string `json:"provider,optional"`
	AlgoTypeName string `json:"algo_type_name,optional"`
	AlgoName     string `json:"algo_name,optional"`
	UserId       string `json:"user_id, optional"` // 用户ID
	UserType     int    `json:"user_type,optional"`
	StartTime    int64  `json:"start_time,optional"`
	EndTime      int64  `json:"end_time,optional"`
}

type WinRatioRsp struct {
	Code         int         `json:"code"`
	Msg          string      `json:"msg"`
	Provider     string      `json:"provider"` // 默认填充字段
	AlgoTypeName string      `json:"algo_type_name"`
	AlgoName     string      `json:"algo_name"`
	Head         RatioHeader `json:"head"`
	WinRatio     []WR        `json:"win_ratio"`
	OddsRatio    []Odds      `json:"odds_ratio"`
	ProfitRatio  []Profit    `json:"profit_ratio"`
}

type SignalInfo struct {
	Day      string  `json:"day"`       // 日期
	OrderCnt int     `json:"order_cnt"` // 下单量
	Progress float64 `json:"progress"`  // 完成率
}

type SignalReq struct {
	Provider     string `json:"provider,optional"`
	AlgoTypeName string `json:"algo_type_name,optional"`
	AlgoName     string `json:"algo_name,optional"`
	UserId       string `json:"user_id, optional"` // 用户ID
	UserType     int    `json:"user_type,optional"`
	StartTime    int64  `json:"start_time,optional"`
	EndTime      int64  `json:"end_time,optional"`
}

type SignalRsp struct {
	Code         int          `json:"code"`
	Msg          string       `json:"msg"`
	Provider     string       `json:"provider"`
	AlgoTypeName string       `json:"algo_type_name"`
	AlgoName     string       `json:"algo_name"`
	Signals      []SignalInfo `json:"signals"`
}
