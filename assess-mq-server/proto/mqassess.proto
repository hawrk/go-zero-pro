syntax = "proto3";

option go_package = "proto";
package mqassess;

message AssessInfo {
  int64 transact_time = 1;
  int64 order_qty = 2;
  int64 last_qty = 3;
  int64 cancelled_qty = 4;
  int64 rejected_qty = 5;
  double vwap = 6;
  double vwap_deviation = 7;
  int64 last_price = 8;
  int64 arrived_price = 9;
  double arrived_price_deviation = 10;
  double market_rate = 11;               // 市场参与率
  double deal_rate = 12;                // 成交量比重
  double deal_progress = 13;            // 成交进度
}

message GeneralReq {
  int32 algo_id = 1;
  string sec_id = 2;
  int32 time_demension = 3;
  int32 order_status_type = 4;
  int64 start_time = 5;
  int64 end_time = 6;
  string user_id = 7;    // 交易账户ID
}

message GeneralRsp {
  int32 code = 1;
  string msg = 2;
  repeated AssessInfo info = 3;
}


message SecurityInfo {
  int64 id = 1;
  string sec_id = 2;
  string sec_name = 3;
  int32 status = 4;
  int32 fund_type = 5;
  int32 stock_type = 6;
  string update_time = 7;
  int32 liquidity = 8;     // 流动性 1-高 2-中3-低
  string industry = 9;     // 行业属性
}
message SecurityListReq {
  string sec_id = 1;    // 证券ID
  int32  page = 2;
  int32 limit = 3;
}

message SecurityListRsp {
  int32 code = 1;
  string msg = 2;
  int64 total = 3;
  repeated SecurityInfo infos = 4;
}

message SecurityUpdate {
  string sec_id = 1;
  string sec_name = 2;
  int32 fund_type = 3;
  int32 stock_type = 4;
  int32 liquidity = 5;     // 流动性 1-高 2-中3-低
  string industry = 6;     // 行业属性
}

message SecurityModifyReq {
  int32 oper_type = 1;
  repeated SecurityUpdate list = 2;
}

message SecurityModifyRsp {
  int32 code = 1;
  string msg = 2;
  int32 result = 3;
}

message ImportSecurityReq {
  repeated SecurityInfo list = 1;
}

message ImportSecurityRsp {
  int32 code = 1;
  string msg = 2;
  int32 result = 3;
}

message ExportSecurityReq {

}

message ExportSecurityRsp {
  repeated SecurityInfo infos = 1;
}

message UserInfo {
  int64 Id = 1;
  string user_id = 2;
  string user_name = 3;
  int32 user_type = 4;
  string user_grade = 5;
  string update_time = 6;
}

message UserListReq {
  string user_id = 1;
  int32 page = 2;
  int32 limit = 3;
}

message UserListRsp {
  int32 code = 1;
  string msg = 2;
  int64 total = 3;
  repeated UserInfo infos = 4;
}

message UserUpdate {
  string user_id = 1;
  string user_name = 2;
  string grade = 3;
}

message UserModifyReq {
  int32 oper_type = 1;
  repeated UserUpdate list = 2;
}

message UserModifyRsp {
  int32 code = 1;
  string msg = 2;
  int32 result = 3;
}

message ImportUserReq {
  repeated UserInfo infos = 1;
}

message ImportUserRsp {
  int32 code = 1;
  string msg = 2;
  int32 result = 3;
}

message ExportUserReq {

}

message ExportUserRsp{
  repeated UserInfo infos = 1;
}

// --------------

message AlgoConfigReq {
  int32 profile_type = 1;   // 1-经济性 2-完成度 3-风险度 4-绩效 5-稳定性
  string algo_config = 2;       // 配置信息json 字符串
}

message AlgoConfigRsp {
  int32 code = 1;
  string msg = 2;
  int32 result = 3;
}

message GetAlgoConfigReq {
  int32 profile_type = 1;   // 1-经济性 2-完成度 3-风险度 4-绩效 5-稳定性
}

message GetAlgoConfigRsp {
  int32 code = 1;
  string msg = 2;
  string config = 3;    // json字符串
}

message ApiAlgoOrderReq {
  bytes value = 1;      // 母单序列化后的数据
}

message ApiAlgoOrderRsp {
  int32 code = 1;
  string msg = 2;
}

service AssessMqService {
  // 获取绩效概况 （实时数据）
  rpc GetMqGeneral(GeneralReq) returns (GeneralRsp);

  // 配置： 证券列表
  rpc SecurityList(SecurityListReq) returns (SecurityListRsp);

  // 配置： 证券属性修改
  rpc SecurityUpdate(SecurityModifyReq) returns (SecurityModifyRsp);

  // 配置： 证券信息导入
  rpc ImportSecurityInfo(ImportSecurityReq) returns (ImportSecurityRsp);

  // 配置：证券信息导出
  rpc ExportSecurityInfo(ExportSecurityReq) returns (ExportSecurityRsp);

  // 配置：用户列表
  rpc UserList(UserListReq) returns (UserListRsp);

  // 配置：用户级别修改
  rpc UserUpdate(UserModifyReq) returns (UserModifyRsp);

  // 配置： 用户信息导入
  rpc ImportUserInfo(ImportUserReq) returns (ImportUserRsp);

  // 配置： 用户信息导出
  rpc ExportUserInfo(ExportUserReq) returns (ExportUserRsp);

  // 配置： 算法配置
  rpc AlgoConfig(AlgoConfigReq) returns (AlgoConfigRsp);

  // 配置： 算法配置查询
  rpc GetAlgoConfig(GetAlgoConfigReq) returns (GetAlgoConfigRsp);

  // api测试接口母单
  rpc SendAlgoOrder(ApiAlgoOrderReq) returns (ApiAlgoOrderRsp);

  // api测试接口子单
  rpc SendChildOrder(ApiAlgoOrderReq) returns (ApiAlgoOrderRsp);
}