// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: mornano.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AlgoChooseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SelectType   int32  `protobuf:"varint,2,opt,name=select_type,json=selectType,proto3" json:"select_type,omitempty"`        //下拉选择类型 :  1-拉取厂商列表  2-拉取算法类型列表  3-拉取算法名称列表
	Provider     string `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`                               // 厂商名称
	AlgoTypeName string `protobuf:"bytes,4,opt,name=algo_type_name,json=algoTypeName,proto3" json:"algo_type_name,omitempty"` // 算法类型名称
	AlgoName     string `protobuf:"bytes,5,opt,name=algo_name,json=algoName,proto3" json:"algo_name,omitempty"`               // 算法名称
}

func (x *AlgoChooseReq) Reset() {
	*x = AlgoChooseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mornano_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlgoChooseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgoChooseReq) ProtoMessage() {}

func (x *AlgoChooseReq) ProtoReflect() protoreflect.Message {
	mi := &file_mornano_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgoChooseReq.ProtoReflect.Descriptor instead.
func (*AlgoChooseReq) Descriptor() ([]byte, []int) {
	return file_mornano_proto_rawDescGZIP(), []int{0}
}

func (x *AlgoChooseReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AlgoChooseReq) GetSelectType() int32 {
	if x != nil {
		return x.SelectType
	}
	return 0
}

func (x *AlgoChooseReq) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *AlgoChooseReq) GetAlgoTypeName() string {
	if x != nil {
		return x.AlgoTypeName
	}
	return ""
}

func (x *AlgoChooseReq) GetAlgoName() string {
	if x != nil {
		return x.AlgoName
	}
	return ""
}

type AlgoChooseRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg          string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Provider     []string `protobuf:"bytes,3,rep,name=provider,proto3" json:"provider,omitempty"`                               // 厂商列表
	AlgoTypeName []string `protobuf:"bytes,4,rep,name=algo_type_name,json=algoTypeName,proto3" json:"algo_type_name,omitempty"` // 算法类型列表
	AlgoName     []string `protobuf:"bytes,5,rep,name=algo_name,json=algoName,proto3" json:"algo_name,omitempty"`               // 算法列表
}

func (x *AlgoChooseRsp) Reset() {
	*x = AlgoChooseRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mornano_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlgoChooseRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgoChooseRsp) ProtoMessage() {}

func (x *AlgoChooseRsp) ProtoReflect() protoreflect.Message {
	mi := &file_mornano_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgoChooseRsp.ProtoReflect.Descriptor instead.
func (*AlgoChooseRsp) Descriptor() ([]byte, []int) {
	return file_mornano_proto_rawDescGZIP(), []int{1}
}

func (x *AlgoChooseRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AlgoChooseRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AlgoChooseRsp) GetProvider() []string {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *AlgoChooseRsp) GetAlgoTypeName() []string {
	if x != nil {
		return x.AlgoTypeName
	}
	return nil
}

func (x *AlgoChooseRsp) GetAlgoName() []string {
	if x != nil {
		return x.AlgoName
	}
	return nil
}

type LoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginName string `protobuf:"bytes,1,opt,name=login_name,json=loginName,proto3" json:"login_name,omitempty"`
	Password  string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *LoginReq) Reset() {
	*x = LoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mornano_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReq) ProtoMessage() {}

func (x *LoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_mornano_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReq.ProtoReflect.Descriptor instead.
func (*LoginReq) Descriptor() ([]byte, []int) {
	return file_mornano_proto_rawDescGZIP(), []int{2}
}

func (x *LoginReq) GetLoginName() string {
	if x != nil {
		return x.LoginName
	}
	return ""
}

func (x *LoginReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LoginRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Allow    int32  `protobuf:"varint,3,opt,name=allow,proto3" json:"allow,omitempty"`
	Role     int32  `protobuf:"varint,4,opt,name=role,proto3" json:"role,omitempty"`                        // 角色：1-普通用户 2-算法厂商  3-管理员
	Passwd   string `protobuf:"bytes,5,opt,name=passwd,proto3" json:"passwd,omitempty"`                     // 密码
	UserName string `protobuf:"bytes,6,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"` // 用户名称
}

func (x *LoginRsp) Reset() {
	*x = LoginRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mornano_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRsp) ProtoMessage() {}

func (x *LoginRsp) ProtoReflect() protoreflect.Message {
	mi := &file_mornano_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRsp.ProtoReflect.Descriptor instead.
func (*LoginRsp) Descriptor() ([]byte, []int) {
	return file_mornano_proto_rawDescGZIP(), []int{3}
}

func (x *LoginRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *LoginRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *LoginRsp) GetAllow() int32 {
	if x != nil {
		return x.Allow
	}
	return 0
}

func (x *LoginRsp) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *LoginRsp) GetPasswd() string {
	if x != nil {
		return x.Passwd
	}
	return ""
}

func (x *LoginRsp) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type AlgoInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperType int32 `protobuf:"varint,1,opt,name=oper_type,json=operType,proto3" json:"oper_type,omitempty"` // 1-查所有算法信息
}

func (x *AlgoInfoReq) Reset() {
	*x = AlgoInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mornano_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlgoInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgoInfoReq) ProtoMessage() {}

func (x *AlgoInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_mornano_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgoInfoReq.ProtoReflect.Descriptor instead.
func (*AlgoInfoReq) Descriptor() ([]byte, []int) {
	return file_mornano_proto_rawDescGZIP(), []int{4}
}

func (x *AlgoInfoReq) GetOperType() int32 {
	if x != nil {
		return x.OperType
	}
	return 0
}

type AlgoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlgoId       int32  `protobuf:"varint,1,opt,name=algo_id,json=algoId,proto3" json:"algo_id,omitempty"`                    // 算法ID
	AlgoName     string `protobuf:"bytes,2,opt,name=algo_name,json=algoName,proto3" json:"algo_name,omitempty"`               // 算法名称
	AlgoType     int32  `protobuf:"varint,3,opt,name=algo_type,json=algoType,proto3" json:"algo_type,omitempty"`              // 算法类型
	AlgoTypeName string `protobuf:"bytes,4,opt,name=algo_type_name,json=algoTypeName,proto3" json:"algo_type_name,omitempty"` // 算法类型名称
	Provider     string `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`                               // 算法厂商
}

func (x *AlgoInfo) Reset() {
	*x = AlgoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mornano_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlgoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgoInfo) ProtoMessage() {}

func (x *AlgoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mornano_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgoInfo.ProtoReflect.Descriptor instead.
func (*AlgoInfo) Descriptor() ([]byte, []int) {
	return file_mornano_proto_rawDescGZIP(), []int{5}
}

func (x *AlgoInfo) GetAlgoId() int32 {
	if x != nil {
		return x.AlgoId
	}
	return 0
}

func (x *AlgoInfo) GetAlgoName() string {
	if x != nil {
		return x.AlgoName
	}
	return ""
}

func (x *AlgoInfo) GetAlgoType() int32 {
	if x != nil {
		return x.AlgoType
	}
	return 0
}

func (x *AlgoInfo) GetAlgoTypeName() string {
	if x != nil {
		return x.AlgoTypeName
	}
	return ""
}

func (x *AlgoInfo) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type AlgoInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Infos []*AlgoInfo `protobuf:"bytes,3,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (x *AlgoInfoRsp) Reset() {
	*x = AlgoInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mornano_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlgoInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgoInfoRsp) ProtoMessage() {}

func (x *AlgoInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_mornano_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgoInfoRsp.ProtoReflect.Descriptor instead.
func (*AlgoInfoRsp) Descriptor() ([]byte, []int) {
	return file_mornano_proto_rawDescGZIP(), []int{6}
}

func (x *AlgoInfoRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AlgoInfoRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AlgoInfoRsp) GetInfos() []*AlgoInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CapitalReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户账户ID
}

func (x *CapitalReq) Reset() {
	*x = CapitalReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mornano_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapitalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapitalReq) ProtoMessage() {}

func (x *CapitalReq) ProtoReflect() protoreflect.Message {
	mi := &file_mornano_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapitalReq.ProtoReflect.Descriptor instead.
func (*CapitalReq) Descriptor() ([]byte, []int) {
	return file_mornano_proto_rawDescGZIP(), []int{7}
}

func (x *CapitalReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type StockPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecId     string  `protobuf:"bytes,1,opt,name=sec_id,json=secId,proto3" json:"sec_id,omitempty"`               // 证券代码
	SecName   string  `protobuf:"bytes,2,opt,name=sec_name,json=secName,proto3" json:"sec_name,omitempty"`         // 证券名称
	MarketCap float64 `protobuf:"fixed64,3,opt,name=market_cap,json=marketCap,proto3" json:"market_cap,omitempty"` // 市值
	Cost      float64 `protobuf:"fixed64,4,opt,name=cost,proto3" json:"cost,omitempty"`                            // 成本
}

func (x *StockPosition) Reset() {
	*x = StockPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mornano_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockPosition) ProtoMessage() {}

func (x *StockPosition) ProtoReflect() protoreflect.Message {
	mi := &file_mornano_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockPosition.ProtoReflect.Descriptor instead.
func (*StockPosition) Descriptor() ([]byte, []int) {
	return file_mornano_proto_rawDescGZIP(), []int{8}
}

func (x *StockPosition) GetSecId() string {
	if x != nil {
		return x.SecId
	}
	return ""
}

func (x *StockPosition) GetSecName() string {
	if x != nil {
		return x.SecName
	}
	return ""
}

func (x *StockPosition) GetMarketCap() float64 {
	if x != nil {
		return x.MarketCap
	}
	return 0
}

func (x *StockPosition) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

type CapitailRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          int32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string           `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Available     float64          `protobuf:"fixed64,3,opt,name=available,proto3" json:"available,omitempty"`                            // 可用资金
	StockPosition []*StockPosition `protobuf:"bytes,4,rep,name=stock_position,json=stockPosition,proto3" json:"stock_position,omitempty"` //持仓信息
}

func (x *CapitailRsp) Reset() {
	*x = CapitailRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mornano_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapitailRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapitailRsp) ProtoMessage() {}

func (x *CapitailRsp) ProtoReflect() protoreflect.Message {
	mi := &file_mornano_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapitailRsp.ProtoReflect.Descriptor instead.
func (*CapitailRsp) Descriptor() ([]byte, []int) {
	return file_mornano_proto_rawDescGZIP(), []int{9}
}

func (x *CapitailRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CapitailRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CapitailRsp) GetAvailable() float64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *CapitailRsp) GetStockPosition() []*StockPosition {
	if x != nil {
		return x.StockPosition
	}
	return nil
}

var File_mornano_proto protoreflect.FileDescriptor

var file_mornano_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x6f, 0x72, 0x6e, 0x61, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6d, 0x6f, 0x72, 0x6e, 0x61, 0x6e, 0x6f, 0x22, 0xa8, 0x01, 0x0a, 0x0d, 0x41, 0x6c, 0x67,
	0x6f, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x67, 0x6f, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6c, 0x67, 0x6f, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x0d, 0x41, 0x6c, 0x67, 0x6f, 0x43, 0x68, 0x6f, 0x6f,
	0x73, 0x65, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6c, 0x67, 0x6f, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x6c, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x6c, 0x67, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x45, 0x0a, 0x08, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x8f, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x2a, 0x0a, 0x0b, 0x41, 0x6c, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x9f, 0x01, 0x0a, 0x08, 0x41, 0x6c, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61,
	0x6c, 0x67, 0x6f, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6c, 0x67, 0x6f, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6c, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x67, 0x6f, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x22, 0x5c, 0x0a, 0x0b, 0x41, 0x6c, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x72, 0x6e, 0x61, 0x6e, 0x6f, 0x2e,
	0x41, 0x6c, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22,
	0x25, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x65, 0x63, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x22, 0x90, 0x01, 0x0a,
	0x0b, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x3d, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x72, 0x6e, 0x61,
	0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x32,
	0x81, 0x02, 0x0a, 0x0e, 0x4d, 0x6f, 0x72, 0x6e, 0x61, 0x6e, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x43, 0x68, 0x6f,
	0x6f, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x6d, 0x6f, 0x72, 0x6e, 0x61, 0x6e,
	0x6f, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x6d, 0x6f, 0x72, 0x6e, 0x61, 0x6e, 0x6f, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x43, 0x68,
	0x6f, 0x6f, 0x73, 0x65, 0x52, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x11, 0x2e, 0x6d, 0x6f, 0x72, 0x6e, 0x61, 0x6e, 0x6f, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x6d, 0x6f, 0x72, 0x6e, 0x61,
	0x6e, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x2e, 0x6d, 0x6f, 0x72,
	0x6e, 0x61, 0x6e, 0x6f, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x14, 0x2e, 0x6d, 0x6f, 0x72, 0x6e, 0x61, 0x6e, 0x6f, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x13, 0x2e, 0x6d, 0x6f, 0x72, 0x6e, 0x61,
	0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e,
	0x6d, 0x6f, 0x72, 0x6e, 0x61, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x73, 0x70, 0x42, 0x07, 0x5a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mornano_proto_rawDescOnce sync.Once
	file_mornano_proto_rawDescData = file_mornano_proto_rawDesc
)

func file_mornano_proto_rawDescGZIP() []byte {
	file_mornano_proto_rawDescOnce.Do(func() {
		file_mornano_proto_rawDescData = protoimpl.X.CompressGZIP(file_mornano_proto_rawDescData)
	})
	return file_mornano_proto_rawDescData
}

var file_mornano_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_mornano_proto_goTypes = []interface{}{
	(*AlgoChooseReq)(nil), // 0: mornano.AlgoChooseReq
	(*AlgoChooseRsp)(nil), // 1: mornano.AlgoChooseRsp
	(*LoginReq)(nil),      // 2: mornano.LoginReq
	(*LoginRsp)(nil),      // 3: mornano.LoginRsp
	(*AlgoInfoReq)(nil),   // 4: mornano.AlgoInfoReq
	(*AlgoInfo)(nil),      // 5: mornano.AlgoInfo
	(*AlgoInfoRsp)(nil),   // 6: mornano.AlgoInfoRsp
	(*CapitalReq)(nil),    // 7: mornano.CapitalReq
	(*StockPosition)(nil), // 8: mornano.StockPosition
	(*CapitailRsp)(nil),   // 9: mornano.CapitailRsp
}
var file_mornano_proto_depIdxs = []int32{
	5, // 0: mornano.AlgoInfoRsp.infos:type_name -> mornano.AlgoInfo
	8, // 1: mornano.CapitailRsp.stock_position:type_name -> mornano.StockPosition
	0, // 2: mornano.MornanoService.GetAlgoChooseList:input_type -> mornano.AlgoChooseReq
	2, // 3: mornano.MornanoService.LoginCheck:input_type -> mornano.LoginReq
	4, // 4: mornano.MornanoService.GetAlgoInfo:input_type -> mornano.AlgoInfoReq
	7, // 5: mornano.MornanoService.GetUserCapital:input_type -> mornano.CapitalReq
	1, // 6: mornano.MornanoService.GetAlgoChooseList:output_type -> mornano.AlgoChooseRsp
	3, // 7: mornano.MornanoService.LoginCheck:output_type -> mornano.LoginRsp
	6, // 8: mornano.MornanoService.GetAlgoInfo:output_type -> mornano.AlgoInfoRsp
	9, // 9: mornano.MornanoService.GetUserCapital:output_type -> mornano.CapitailRsp
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_mornano_proto_init() }
func file_mornano_proto_init() {
	if File_mornano_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mornano_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlgoChooseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mornano_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlgoChooseRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mornano_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mornano_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mornano_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlgoInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mornano_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlgoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mornano_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlgoInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mornano_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapitalReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mornano_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mornano_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapitailRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mornano_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mornano_proto_goTypes,
		DependencyIndexes: file_mornano_proto_depIdxs,
		MessageInfos:      file_mornano_proto_msgTypes,
	}.Build()
	File_mornano_proto = out.File
	file_mornano_proto_rawDesc = nil
	file_mornano_proto_goTypes = nil
	file_mornano_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MornanoServiceClient is the client API for MornanoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MornanoServiceClient interface {
	// 算法选择框数据
	GetAlgoChooseList(ctx context.Context, in *AlgoChooseReq, opts ...grpc.CallOption) (*AlgoChooseRsp, error)
	// 登陆校验   --原则上只返回密码和角色
	LoginCheck(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
	// 查询算法基础信息
	GetAlgoInfo(ctx context.Context, in *AlgoInfoReq, opts ...grpc.CallOption) (*AlgoInfoRsp, error)
	// 查询用户资金和证券持仓信息  (用户画像)
	GetUserCapital(ctx context.Context, in *CapitalReq, opts ...grpc.CallOption) (*CapitailRsp, error)
}

type mornanoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMornanoServiceClient(cc grpc.ClientConnInterface) MornanoServiceClient {
	return &mornanoServiceClient{cc}
}

func (c *mornanoServiceClient) GetAlgoChooseList(ctx context.Context, in *AlgoChooseReq, opts ...grpc.CallOption) (*AlgoChooseRsp, error) {
	out := new(AlgoChooseRsp)
	err := c.cc.Invoke(ctx, "/mornano.MornanoService/GetAlgoChooseList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mornanoServiceClient) LoginCheck(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, "/mornano.MornanoService/LoginCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mornanoServiceClient) GetAlgoInfo(ctx context.Context, in *AlgoInfoReq, opts ...grpc.CallOption) (*AlgoInfoRsp, error) {
	out := new(AlgoInfoRsp)
	err := c.cc.Invoke(ctx, "/mornano.MornanoService/GetAlgoInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mornanoServiceClient) GetUserCapital(ctx context.Context, in *CapitalReq, opts ...grpc.CallOption) (*CapitailRsp, error) {
	out := new(CapitailRsp)
	err := c.cc.Invoke(ctx, "/mornano.MornanoService/GetUserCapital", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MornanoServiceServer is the server API for MornanoService service.
type MornanoServiceServer interface {
	// 算法选择框数据
	GetAlgoChooseList(context.Context, *AlgoChooseReq) (*AlgoChooseRsp, error)
	// 登陆校验   --原则上只返回密码和角色
	LoginCheck(context.Context, *LoginReq) (*LoginRsp, error)
	// 查询算法基础信息
	GetAlgoInfo(context.Context, *AlgoInfoReq) (*AlgoInfoRsp, error)
	// 查询用户资金和证券持仓信息  (用户画像)
	GetUserCapital(context.Context, *CapitalReq) (*CapitailRsp, error)
}

// UnimplementedMornanoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMornanoServiceServer struct {
}

func (*UnimplementedMornanoServiceServer) GetAlgoChooseList(context.Context, *AlgoChooseReq) (*AlgoChooseRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlgoChooseList not implemented")
}
func (*UnimplementedMornanoServiceServer) LoginCheck(context.Context, *LoginReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginCheck not implemented")
}
func (*UnimplementedMornanoServiceServer) GetAlgoInfo(context.Context, *AlgoInfoReq) (*AlgoInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlgoInfo not implemented")
}
func (*UnimplementedMornanoServiceServer) GetUserCapital(context.Context, *CapitalReq) (*CapitailRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCapital not implemented")
}

func RegisterMornanoServiceServer(s *grpc.Server, srv MornanoServiceServer) {
	s.RegisterService(&_MornanoService_serviceDesc, srv)
}

func _MornanoService_GetAlgoChooseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlgoChooseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MornanoServiceServer).GetAlgoChooseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mornano.MornanoService/GetAlgoChooseList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MornanoServiceServer).GetAlgoChooseList(ctx, req.(*AlgoChooseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MornanoService_LoginCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MornanoServiceServer).LoginCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mornano.MornanoService/LoginCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MornanoServiceServer).LoginCheck(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MornanoService_GetAlgoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlgoInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MornanoServiceServer).GetAlgoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mornano.MornanoService/GetAlgoInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MornanoServiceServer).GetAlgoInfo(ctx, req.(*AlgoInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MornanoService_GetUserCapital_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapitalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MornanoServiceServer).GetUserCapital(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mornano.MornanoService/GetUserCapital",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MornanoServiceServer).GetUserCapital(ctx, req.(*CapitalReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MornanoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mornano.MornanoService",
	HandlerType: (*MornanoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAlgoChooseList",
			Handler:    _MornanoService_GetAlgoChooseList_Handler,
		},
		{
			MethodName: "LoginCheck",
			Handler:    _MornanoService_LoginCheck_Handler,
		},
		{
			MethodName: "GetAlgoInfo",
			Handler:    _MornanoService_GetAlgoInfo_Handler,
		},
		{
			MethodName: "GetUserCapital",
			Handler:    _MornanoService_GetUserCapital_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mornano.proto",
}
