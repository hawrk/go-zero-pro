// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: asorder.proto

package asorder

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 子单下发绩效平台接口
type ChildOrderPerf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint32  `protobuf:"fixed32,1,opt,name=Id,proto3" json:"Id,omitempty"`                          // uint32  子单号
	BusUserId      string  `protobuf:"bytes,2,opt,name=BusUserId,proto3" json:"BusUserId,omitempty"`              // 总线用户ID
	BusUuserId     uint32  `protobuf:"fixed32,3,opt,name=BusUuserId,proto3" json:"BusUuserId,omitempty"`          // 总线用户整型ID
	AlgoOrderId    uint32  `protobuf:"fixed32,4,opt,name=AlgoOrderId,proto3" json:"AlgoOrderId,omitempty"`        // uint32   母单号
	AlgorithmType  uint32  `protobuf:"fixed32,5,opt,name=AlgorithmType,proto3" json:"AlgorithmType,omitempty"`    // -->uint16 算法类型
	AlgorithmId    uint32  `protobuf:"fixed32,6,opt,name=AlgorithmId,proto3" json:"AlgorithmId,omitempty"`        // -->uint16 算法ID
	USecurityId    uint32  `protobuf:"fixed32,7,opt,name=USecurityId,proto3" json:"USecurityId,omitempty"`        // uint32 证券ID
	SecurityId     string  `protobuf:"bytes,8,opt,name=SecurityId,proto3" json:"SecurityId,omitempty"`            // -->char[8] 证券代码
	Side           uint32  `protobuf:"fixed32,9,opt,name=Side,proto3" json:"Side,omitempty"`                      // 买卖方向  49-买   50-卖
	OrderQty       uint64  `protobuf:"fixed64,10,opt,name=OrderQty,proto3" json:"OrderQty,omitempty"`             // uint64 委托数量
	Price          uint64  `protobuf:"fixed64,11,opt,name=Price,proto3" json:"Price,omitempty"`                   // uint64 委托价格
	OrderType      uint32  `protobuf:"fixed32,12,opt,name=OrderType,proto3" json:"OrderType,omitempty"`           // -->uint8 订单类型
	CumQty         uint64  `protobuf:"fixed64,13,opt,name=CumQty,proto3" json:"CumQty,omitempty"`                 // uint64 总成交数量
	LastPx         uint64  `protobuf:"fixed64,14,opt,name=LastPx,proto3" json:"LastPx,omitempty"`                 // uint64 成交金额
	LastQty        uint64  `protobuf:"fixed64,15,opt,name=LastQty,proto3" json:"LastQty,omitempty"`               // uint64 成交数量
	Charge         float64 `protobuf:"fixed64,16,opt,name=Charge,proto3" json:"Charge,omitempty"`                 // 手续费
	ArrivedPrice   uint64  `protobuf:"fixed64,17,opt,name=ArrivedPrice,proto3" json:"ArrivedPrice,omitempty"`     // uint64 到达价格
	ChildOrdStatus uint32  `protobuf:"fixed32,18,opt,name=ChildOrdStatus,proto3" json:"ChildOrdStatus,omitempty"` // -->uint8 子订单状态
	TransactTime   uint64  `protobuf:"fixed64,19,opt,name=TransactTime,proto3" json:"TransactTime,omitempty"`     // uint64 交易时间
	Version        uint32  `protobuf:"fixed32,20,opt,name=Version,proto3" json:"Version,omitempty"`               // 子单版本号
	BatchNo        int64   `protobuf:"varint,21,opt,name=BatchNo,proto3" json:"BatchNo,omitempty"`                // 批次号
	BatchName      string  `protobuf:"bytes,22,opt,name=BatchName,proto3" json:"BatchName,omitempty"`             // 批次号名称
	SourceFrom     int32   `protobuf:"varint,23,opt,name=SourceFrom,proto3" json:"SourceFrom,omitempty"`          // 来源 0-总线 1-数据修复 2-数据导入
}

func (x *ChildOrderPerf) Reset() {
	*x = ChildOrderPerf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asorder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildOrderPerf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildOrderPerf) ProtoMessage() {}

func (x *ChildOrderPerf) ProtoReflect() protoreflect.Message {
	mi := &file_asorder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildOrderPerf.ProtoReflect.Descriptor instead.
func (*ChildOrderPerf) Descriptor() ([]byte, []int) {
	return file_asorder_proto_rawDescGZIP(), []int{0}
}

func (x *ChildOrderPerf) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChildOrderPerf) GetBusUserId() string {
	if x != nil {
		return x.BusUserId
	}
	return ""
}

func (x *ChildOrderPerf) GetBusUuserId() uint32 {
	if x != nil {
		return x.BusUuserId
	}
	return 0
}

func (x *ChildOrderPerf) GetAlgoOrderId() uint32 {
	if x != nil {
		return x.AlgoOrderId
	}
	return 0
}

func (x *ChildOrderPerf) GetAlgorithmType() uint32 {
	if x != nil {
		return x.AlgorithmType
	}
	return 0
}

func (x *ChildOrderPerf) GetAlgorithmId() uint32 {
	if x != nil {
		return x.AlgorithmId
	}
	return 0
}

func (x *ChildOrderPerf) GetUSecurityId() uint32 {
	if x != nil {
		return x.USecurityId
	}
	return 0
}

func (x *ChildOrderPerf) GetSecurityId() string {
	if x != nil {
		return x.SecurityId
	}
	return ""
}

func (x *ChildOrderPerf) GetSide() uint32 {
	if x != nil {
		return x.Side
	}
	return 0
}

func (x *ChildOrderPerf) GetOrderQty() uint64 {
	if x != nil {
		return x.OrderQty
	}
	return 0
}

func (x *ChildOrderPerf) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ChildOrderPerf) GetOrderType() uint32 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *ChildOrderPerf) GetCumQty() uint64 {
	if x != nil {
		return x.CumQty
	}
	return 0
}

func (x *ChildOrderPerf) GetLastPx() uint64 {
	if x != nil {
		return x.LastPx
	}
	return 0
}

func (x *ChildOrderPerf) GetLastQty() uint64 {
	if x != nil {
		return x.LastQty
	}
	return 0
}

func (x *ChildOrderPerf) GetCharge() float64 {
	if x != nil {
		return x.Charge
	}
	return 0
}

func (x *ChildOrderPerf) GetArrivedPrice() uint64 {
	if x != nil {
		return x.ArrivedPrice
	}
	return 0
}

func (x *ChildOrderPerf) GetChildOrdStatus() uint32 {
	if x != nil {
		return x.ChildOrdStatus
	}
	return 0
}

func (x *ChildOrderPerf) GetTransactTime() uint64 {
	if x != nil {
		return x.TransactTime
	}
	return 0
}

func (x *ChildOrderPerf) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ChildOrderPerf) GetBatchNo() int64 {
	if x != nil {
		return x.BatchNo
	}
	return 0
}

func (x *ChildOrderPerf) GetBatchName() string {
	if x != nil {
		return x.BatchName
	}
	return ""
}

func (x *ChildOrderPerf) GetSourceFrom() int32 {
	if x != nil {
		return x.SourceFrom
	}
	return 0
}

// 母单下发绩效平台接口
type AlgoOrderPerf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint32 `protobuf:"fixed32,1,opt,name=Id,proto3" json:"Id,omitempty"`                       // uint32
	BasketId      uint32 `protobuf:"fixed32,2,opt,name=BasketId,proto3" json:"BasketId,omitempty"`           // 篮子ID
	AlgorithmType uint32 `protobuf:"fixed32,3,opt,name=AlgorithmType,proto3" json:"AlgorithmType,omitempty"` // -->uint16
	AlgorithmId   uint32 `protobuf:"fixed32,4,opt,name=AlgorithmId,proto3" json:"AlgorithmId,omitempty"`     // -->uint16
	USecurityId   uint32 `protobuf:"fixed32,5,opt,name=USecurityId,proto3" json:"USecurityId,omitempty"`     // uint32
	SecurityId    string `protobuf:"bytes,6,opt,name=SecurityId,proto3" json:"SecurityId,omitempty"`         // char[8]
	AlgoOrderQty  uint64 `protobuf:"fixed64,7,opt,name=AlgoOrderQty,proto3" json:"AlgoOrderQty,omitempty"`   // uint64
	TransactTime  uint64 `protobuf:"fixed64,8,opt,name=TransactTime,proto3" json:"TransactTime,omitempty"`   // uint64
	StartTime     uint64 `protobuf:"fixed64,9,opt,name=StartTime,proto3" json:"StartTime,omitempty"`         // 母单开始时间
	EndTime       uint64 `protobuf:"fixed64,10,opt,name=EndTime,proto3" json:"EndTime,omitempty"`            // 母单结束时间
	BusUserId     string `protobuf:"bytes,11,opt,name=BusUserId,proto3" json:"BusUserId,omitempty"`          // 总线用户ID
	BatchNo       int64  `protobuf:"varint,12,opt,name=BatchNo,proto3" json:"BatchNo,omitempty"`             // 批次号
	BatchName     string `protobuf:"bytes,13,opt,name=BatchName,proto3" json:"BatchName,omitempty"`          // 批次号名称
	SourceFrom    int32  `protobuf:"varint,14,opt,name=SourceFrom,proto3" json:"SourceFrom,omitempty"`       // 来源 0-总线 1-数据修复 2-数据导入
}

func (x *AlgoOrderPerf) Reset() {
	*x = AlgoOrderPerf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asorder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlgoOrderPerf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgoOrderPerf) ProtoMessage() {}

func (x *AlgoOrderPerf) ProtoReflect() protoreflect.Message {
	mi := &file_asorder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgoOrderPerf.ProtoReflect.Descriptor instead.
func (*AlgoOrderPerf) Descriptor() ([]byte, []int) {
	return file_asorder_proto_rawDescGZIP(), []int{1}
}

func (x *AlgoOrderPerf) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AlgoOrderPerf) GetBasketId() uint32 {
	if x != nil {
		return x.BasketId
	}
	return 0
}

func (x *AlgoOrderPerf) GetAlgorithmType() uint32 {
	if x != nil {
		return x.AlgorithmType
	}
	return 0
}

func (x *AlgoOrderPerf) GetAlgorithmId() uint32 {
	if x != nil {
		return x.AlgorithmId
	}
	return 0
}

func (x *AlgoOrderPerf) GetUSecurityId() uint32 {
	if x != nil {
		return x.USecurityId
	}
	return 0
}

func (x *AlgoOrderPerf) GetSecurityId() string {
	if x != nil {
		return x.SecurityId
	}
	return ""
}

func (x *AlgoOrderPerf) GetAlgoOrderQty() uint64 {
	if x != nil {
		return x.AlgoOrderQty
	}
	return 0
}

func (x *AlgoOrderPerf) GetTransactTime() uint64 {
	if x != nil {
		return x.TransactTime
	}
	return 0
}

func (x *AlgoOrderPerf) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AlgoOrderPerf) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *AlgoOrderPerf) GetBusUserId() string {
	if x != nil {
		return x.BusUserId
	}
	return ""
}

func (x *AlgoOrderPerf) GetBatchNo() int64 {
	if x != nil {
		return x.BatchNo
	}
	return 0
}

func (x *AlgoOrderPerf) GetBatchName() string {
	if x != nil {
		return x.BatchName
	}
	return ""
}

func (x *AlgoOrderPerf) GetSourceFrom() int32 {
	if x != nil {
		return x.SourceFrom
	}
	return 0
}

// 总线用户信息接口
type UserInfoPerf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32 `protobuf:"fixed32,1,opt,name=Id,proto3" json:"Id,omitempty"`               // 用户唯一ID
	UserId    string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`         // 用户ID， 交易账户ID
	UserName  string `protobuf:"bytes,3,opt,name=UserName,proto3" json:"UserName,omitempty"`     // 用户名
	UserType  uint32 `protobuf:"fixed32,4,opt,name=UserType,proto3" json:"UserType,omitempty"`   // 用户类型
	RiskGroup uint32 `protobuf:"fixed32,5,opt,name=RiskGroup,proto3" json:"RiskGroup,omitempty"` // 风控组
	UuserId   string `protobuf:"bytes,6,opt,name=UuserId,proto3" json:"UuserId,omitempty"`       // 管理员ID
}

func (x *UserInfoPerf) Reset() {
	*x = UserInfoPerf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asorder_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoPerf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoPerf) ProtoMessage() {}

func (x *UserInfoPerf) ProtoReflect() protoreflect.Message {
	mi := &file_asorder_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoPerf.ProtoReflect.Descriptor instead.
func (*UserInfoPerf) Descriptor() ([]byte, []int) {
	return file_asorder_proto_rawDescGZIP(), []int{2}
}

func (x *UserInfoPerf) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserInfoPerf) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserInfoPerf) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserInfoPerf) GetUserType() uint32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *UserInfoPerf) GetRiskGroup() uint32 {
	if x != nil {
		return x.RiskGroup
	}
	return 0
}

func (x *UserInfoPerf) GetUuserId() string {
	if x != nil {
		return x.UuserId
	}
	return ""
}

// 算法信息接口
type AlgoInfoPerf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                uint32 `protobuf:"fixed32,1,opt,name=Id,proto3" json:"Id,omitempty"`                             // 算法ID,主键
	AlgoName          string `protobuf:"bytes,2,opt,name=AlgoName,proto3" json:"AlgoName,omitempty"`                   // 算法名称
	ProviderName      string `protobuf:"bytes,3,opt,name=ProviderName,proto3" json:"ProviderName,omitempty"`           // 算法厂商名称
	UuserId           uint32 `protobuf:"fixed32,4,opt,name=UuserId,proto3" json:"UuserId,omitempty"`                   // 算法厂商用户ID
	AlgorithmType     uint32 `protobuf:"fixed32,5,opt,name=AlgorithmType,proto3" json:"AlgorithmType,omitempty"`       // 算法类型 1:T0日内回转 2:智能委托 3:调仓
	AlgorithmTypeName string `protobuf:"bytes,6,opt,name=AlgorithmTypeName,proto3" json:"AlgorithmTypeName,omitempty"` // 算法类型名称,算法厂商内部使用
	AlgorithmStatus   uint32 `protobuf:"fixed32,7,opt,name=AlgorithmStatus,proto3" json:"AlgorithmStatus,omitempty"`   // 算法状态 --  bit0: 0-不显示 1-显示; bit1: 0-不可用 1-可用
	RiskGroup         uint32 `protobuf:"fixed32,8,opt,name=RiskGroup,proto3" json:"RiskGroup,omitempty"`               // 风控组
}

func (x *AlgoInfoPerf) Reset() {
	*x = AlgoInfoPerf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asorder_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlgoInfoPerf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgoInfoPerf) ProtoMessage() {}

func (x *AlgoInfoPerf) ProtoReflect() protoreflect.Message {
	mi := &file_asorder_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgoInfoPerf.ProtoReflect.Descriptor instead.
func (*AlgoInfoPerf) Descriptor() ([]byte, []int) {
	return file_asorder_proto_rawDescGZIP(), []int{3}
}

func (x *AlgoInfoPerf) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AlgoInfoPerf) GetAlgoName() string {
	if x != nil {
		return x.AlgoName
	}
	return ""
}

func (x *AlgoInfoPerf) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *AlgoInfoPerf) GetUuserId() uint32 {
	if x != nil {
		return x.UuserId
	}
	return 0
}

func (x *AlgoInfoPerf) GetAlgorithmType() uint32 {
	if x != nil {
		return x.AlgorithmType
	}
	return 0
}

func (x *AlgoInfoPerf) GetAlgorithmTypeName() string {
	if x != nil {
		return x.AlgorithmTypeName
	}
	return ""
}

func (x *AlgoInfoPerf) GetAlgorithmStatus() uint32 {
	if x != nil {
		return x.AlgorithmStatus
	}
	return 0
}

func (x *AlgoInfoPerf) GetRiskGroup() uint32 {
	if x != nil {
		return x.RiskGroup
	}
	return 0
}

// 证券信息接口
type SecurityInfoPerf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityId       string  `protobuf:"bytes,1,opt,name=SecurityId,proto3" json:"SecurityId,omitempty"`              // 证券代码
	SecurityIdSource string  `protobuf:"bytes,2,opt,name=SecurityIdSource,proto3" json:"SecurityIdSource,omitempty"`  // 证券代码源
	SecurityName     string  `protobuf:"bytes,3,opt,name=SecurityName,proto3" json:"SecurityName,omitempty"`          // 证券简称
	PrevClosePx      float64 `protobuf:"fixed64,4,opt,name=PrevClosePx,proto3" json:"PrevClosePx,omitempty"`          // 前收盘价
	SecurityStatus   uint32  `protobuf:"fixed32,5,opt,name=SecurityStatus,proto3" json:"SecurityStatus,omitempty"`    // 证券状态
	HasPriceLimit    uint32  `protobuf:"fixed32,6,opt,name=HasPriceLimit,proto3" json:"HasPriceLimit,omitempty"`      // 是否有涨跌停限制
	LimitType        uint32  `protobuf:"fixed32,7,opt,name=LimitType,proto3" json:"LimitType,omitempty"`              // 涨跌限制类型,1=幅度(百分比),2=价格(绝对值)
	Property         uint32  `protobuf:"fixed32,8,opt,name=Property,proto3" json:"Property,omitempty"`                // 股票板块属性
	UpperLimitPrice  uint64  `protobuf:"fixed64,9,opt,name=UpperLimitPrice,proto3" json:"UpperLimitPrice,omitempty"`  // 上涨限价
	LowerLimitPrice  uint64  `protobuf:"fixed64,10,opt,name=LowerLimitPrice,proto3" json:"LowerLimitPrice,omitempty"` // 下跌限价
}

func (x *SecurityInfoPerf) Reset() {
	*x = SecurityInfoPerf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asorder_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityInfoPerf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityInfoPerf) ProtoMessage() {}

func (x *SecurityInfoPerf) ProtoReflect() protoreflect.Message {
	mi := &file_asorder_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityInfoPerf.ProtoReflect.Descriptor instead.
func (*SecurityInfoPerf) Descriptor() ([]byte, []int) {
	return file_asorder_proto_rawDescGZIP(), []int{4}
}

func (x *SecurityInfoPerf) GetSecurityId() string {
	if x != nil {
		return x.SecurityId
	}
	return ""
}

func (x *SecurityInfoPerf) GetSecurityIdSource() string {
	if x != nil {
		return x.SecurityIdSource
	}
	return ""
}

func (x *SecurityInfoPerf) GetSecurityName() string {
	if x != nil {
		return x.SecurityName
	}
	return ""
}

func (x *SecurityInfoPerf) GetPrevClosePx() float64 {
	if x != nil {
		return x.PrevClosePx
	}
	return 0
}

func (x *SecurityInfoPerf) GetSecurityStatus() uint32 {
	if x != nil {
		return x.SecurityStatus
	}
	return 0
}

func (x *SecurityInfoPerf) GetHasPriceLimit() uint32 {
	if x != nil {
		return x.HasPriceLimit
	}
	return 0
}

func (x *SecurityInfoPerf) GetLimitType() uint32 {
	if x != nil {
		return x.LimitType
	}
	return 0
}

func (x *SecurityInfoPerf) GetProperty() uint32 {
	if x != nil {
		return x.Property
	}
	return 0
}

func (x *SecurityInfoPerf) GetUpperLimitPrice() uint64 {
	if x != nil {
		return x.UpperLimitPrice
	}
	return 0
}

func (x *SecurityInfoPerf) GetLowerLimitPrice() uint64 {
	if x != nil {
		return x.LowerLimitPrice
	}
	return 0
}

// 数据同步接口
type DataSyncPerf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgType  uint32              `protobuf:"fixed32,1,opt,name=MsgType,proto3" json:"MsgType,omitempty"` // 1-用户信息 2-算法信息 3-证券信息
	UserInfo []*UserInfoPerf     `protobuf:"bytes,2,rep,name=userInfo,proto3" json:"userInfo,omitempty"` // 总线用户信息
	AlgoInfo []*AlgoInfoPerf     `protobuf:"bytes,3,rep,name=algoInfo,proto3" json:"algoInfo,omitempty"` // 算法信息
	SecInfo  []*SecurityInfoPerf `protobuf:"bytes,4,rep,name=secInfo,proto3" json:"secInfo,omitempty"`   // 证券信息
}

func (x *DataSyncPerf) Reset() {
	*x = DataSyncPerf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asorder_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSyncPerf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSyncPerf) ProtoMessage() {}

func (x *DataSyncPerf) ProtoReflect() protoreflect.Message {
	mi := &file_asorder_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSyncPerf.ProtoReflect.Descriptor instead.
func (*DataSyncPerf) Descriptor() ([]byte, []int) {
	return file_asorder_proto_rawDescGZIP(), []int{5}
}

func (x *DataSyncPerf) GetMsgType() uint32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *DataSyncPerf) GetUserInfo() []*UserInfoPerf {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *DataSyncPerf) GetAlgoInfo() []*AlgoInfoPerf {
	if x != nil {
		return x.AlgoInfo
	}
	return nil
}

func (x *DataSyncPerf) GetSecInfo() []*SecurityInfoPerf {
	if x != nil {
		return x.SecInfo
	}
	return nil
}

var File_asorder_proto protoreflect.FileDescriptor

var file_asorder_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x73, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x61, 0x73, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xb2, 0x05, 0x0a, 0x0e, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42,
	0x75, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x42, 0x75, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x75, 0x73,
	0x55, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x42,
	0x75, 0x73, 0x55, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x6c, 0x67,
	0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0b,
	0x41, 0x6c, 0x67, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x0d, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0b, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0b, 0x55, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x04, 0x53, 0x69, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x51, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x51, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x75, 0x6d,
	0x51, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x43, 0x75, 0x6d, 0x51, 0x74,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x06, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x61, 0x73,
	0x74, 0x51, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x4c, 0x61, 0x73, 0x74,
	0x51, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x41,
	0x72, 0x72, 0x69, 0x76, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0c, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4f, 0x72,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12,
	0x1c, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0xbb, 0x03,
	0x0a, 0x0d, 0x41, 0x6c, 0x67, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x66, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x08, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x0d, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0b, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0b, 0x55, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6c, 0x67, 0x6f, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x51, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x41, 0x6c, 0x67,
	0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x75, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x75, 0x73, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0xa6, 0x01, 0x0a, 0x0c,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x65, 0x72, 0x66, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x52, 0x69, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x09, 0x52, 0x69, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x55, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x94, 0x02, 0x0a, 0x0c, 0x41, 0x6c, 0x67, 0x6f, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x65, 0x72, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x6c, 0x67, 0x6f, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x6c, 0x67, 0x6f, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x55, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0d, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x69, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x09, 0x52, 0x69, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x80, 0x03, 0x0a, 0x10,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x65, 0x72, 0x66,
	0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x76, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x76, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x50, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x48, 0x61,
	0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x0d, 0x48, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x70,
	0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0f, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x4c,
	0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xc3,
	0x01, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x65, 0x72, 0x66, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x07, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x73,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x65,
	0x72, 0x66, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x08,
	0x61, 0x6c, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x61, 0x73, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x65, 0x72, 0x66, 0x52, 0x08, 0x61, 0x6c, 0x67, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x33, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x61, 0x73, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x65, 0x72, 0x66, 0x52, 0x07, 0x73, 0x65, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x61, 0x73, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_asorder_proto_rawDescOnce sync.Once
	file_asorder_proto_rawDescData = file_asorder_proto_rawDesc
)

func file_asorder_proto_rawDescGZIP() []byte {
	file_asorder_proto_rawDescOnce.Do(func() {
		file_asorder_proto_rawDescData = protoimpl.X.CompressGZIP(file_asorder_proto_rawDescData)
	})
	return file_asorder_proto_rawDescData
}

var file_asorder_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_asorder_proto_goTypes = []interface{}{
	(*ChildOrderPerf)(nil),   // 0: asorder.ChildOrderPerf
	(*AlgoOrderPerf)(nil),    // 1: asorder.AlgoOrderPerf
	(*UserInfoPerf)(nil),     // 2: asorder.UserInfoPerf
	(*AlgoInfoPerf)(nil),     // 3: asorder.AlgoInfoPerf
	(*SecurityInfoPerf)(nil), // 4: asorder.SecurityInfoPerf
	(*DataSyncPerf)(nil),     // 5: asorder.DataSyncPerf
}
var file_asorder_proto_depIdxs = []int32{
	2, // 0: asorder.DataSyncPerf.userInfo:type_name -> asorder.UserInfoPerf
	3, // 1: asorder.DataSyncPerf.algoInfo:type_name -> asorder.AlgoInfoPerf
	4, // 2: asorder.DataSyncPerf.secInfo:type_name -> asorder.SecurityInfoPerf
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_asorder_proto_init() }
func file_asorder_proto_init() {
	if File_asorder_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_asorder_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildOrderPerf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asorder_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlgoOrderPerf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asorder_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoPerf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asorder_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlgoInfoPerf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asorder_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityInfoPerf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asorder_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSyncPerf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_asorder_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_asorder_proto_goTypes,
		DependencyIndexes: file_asorder_proto_depIdxs,
		MessageInfos:      file_asorder_proto_msgTypes,
	}.Build()
	File_asorder_proto = out.File
	file_asorder_proto_rawDesc = nil
	file_asorder_proto_goTypes = nil
	file_asorder_proto_depIdxs = nil
}
