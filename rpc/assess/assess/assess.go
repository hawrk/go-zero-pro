// Code generated by goctl. DO NOT EDIT!
// Source: assess.proto

package assess

import (
	"context"

	"algo_assess/rpc/assess/proto"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DemoReq              = proto.DemoReq
	DemoRsp              = proto.DemoRsp
	OverVewRsp           = proto.OverVewRsp
	OverVewRsp_Data      = proto.OverVewRsp_Data
	OverVewRsp_Data_Info = proto.OverVewRsp_Data_Info
	OverviewReq          = proto.OverviewReq

	Assess interface {
		GetDemo(ctx context.Context, in *DemoReq, opts ...grpc.CallOption) (*DemoRsp, error)
		GetOverview(ctx context.Context, in *OverviewReq, opts ...grpc.CallOption) (*OverVewRsp, error)
	}

	defaultAssess struct {
		cli zrpc.Client
	}
)

func NewAssess(cli zrpc.Client) Assess {
	return &defaultAssess{
		cli: cli,
	}
}

func (m *defaultAssess) GetDemo(ctx context.Context, in *DemoReq, opts ...grpc.CallOption) (*DemoRsp, error) {
	client := proto.NewAssessClient(m.cli.Conn())
	return client.GetDemo(ctx, in, opts...)
}

func (m *defaultAssess) GetOverview(ctx context.Context, in *OverviewReq, opts ...grpc.CallOption) (*OverVewRsp, error) {
	client := proto.NewAssessClient(m.cli.Conn())
	return client.GetOverview(ctx, in, opts...)
}
